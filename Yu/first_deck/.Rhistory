xvar <- names(df_to_plot)[2]
overallholder
xvar
ncol(df_to_plot)
names(df_to_plot)[2]
names(df_to_plot)[3]
# Begin plotting: plot the graph with respect to target index.
p <- plot_ly(df_to_plot
, x = df_to_plot[,2]
, y = variable
, name = names(df_to_plot)[2]
, mode = "markers"
, marker = list(color = 2,size = 8)
)
ncoltoplot <- ncol(df_to_plot) #-1
ncoltoplot # for some reason the above needs to be done before using the loop
# else there would be an extra run where the second to last column will be represented twice
q<-p
ncoltoplot
for (col in 3:ncoltoplot) # Note that ncoltoplot -1 will not work as expected
{
q<-add_trace(q
, x = df_to_plot[,col]
, y = variable
, name = names(df_to_plot)[col]
, marker = list(color = col, size = 8)
, evaluate = TRUE) #evaluate = TRUE allows the loop to function for add_trace
}
layout(q,
title = paste(target, " Metric Index Scale", sep = "."),
xaxis = list(title = ""),
margin = list(l=60, r=60),
yaxis = list(title = ""),
font = list(size = 8)
)
q
# End plotting
}
plot_diabetes_index <- func_plot_group_ratio_vs_overall(nhanes_numDF_numOnly,"FraudRisk")
plot_diabetes_index_ni <- func_plot_group_ratio_vs_overall(nhanes_numDF_numOnly_ni,"fraudRisk")
install.packages("reshape")
plot_diabetes_index_ni <- func_plot_group_ratio_vs_overall(nhanes_numDF_numOnly_ni,"fraudRisk")
install.packages("plotly")
plot_diabetes_index_ni <- func_plot_group_ratio_vs_overall(nhanes_numDF_numOnly_ni,"fraudRisk")
df <- nhanes_numDF_numOnly_ni
target <- "fraudRisk"
targetholder <- "targetholder"
names(df)[names(df)==target]<-targetholder
names(df)[names(df)==targetholder]
df$targetholder
list(df$targetholder)
df <- as.data.frame(df) # somehow the aggregate function doesnt H2o fram well
df$dummyholder <- "overalldummy"
names(df)[names(df)=="dummyholder"] <- "overallholder"
overallholder <- "overallholder"
head(df,5)
agg_by_all <- aggregate(as.data.frame(df), by = list(as.data.frame(df)$overallholder)
, FUN = mean
, na.rm = TRUE
)
agg_by_target <- aggregate(as.data.frame(df), by = list(as.data.frame(df)$targetholder)
, FUN = mean
, na.rm = TRUE
)
agg_by_all
agg_by_target
library(reshape)
targetholderMetrics <- melt(agg_by_target, id = c("Group.1"))
head(targetholderMetrics,5) # columns: Group.1, variable, value
targetholderMetrics <- cast(targetholderMetrics, variable ~ Group.1)
head(targetholderMetrics,5) # columns: variable, No, Yes ## No and Yes are possible values of the Diabetes column
targetholderMetrics
overallholderMetrics <- melt(agg_by_all, id = c("Group.1"))
overallholderMetrics # columns: Group.1, variable, value (means: NA, NA for targetholder and dummyholder)
overallholderMetrics <- cast(overallholderMetrics, variable ~ Group.1)
head(overallholderMetrics,5) # columns: variable, dummy
## try to rename the column names with the target name like
## colnames(targetholderMetrics)[2] <- colnames(targetholderMetrics)[2]+target
## colnames(targetholderMetrics)<-lapply(colnames(target,holderMetrics)) #**#
df_metric_target_vs_all <- merge(targetholderMetrics, overallholderMetrics, by = "variable")
df_metric_target_vs_all # columns: variable, column group for the possible values of target, overall dummy
str(df_metric_target_vs_all)
class(df_metric_target_vs_all) # this is a data frame
ncol(df_metric_target_vs_all)
df_to_plot <- data.frame(df_metric_target_vs_all$variable)
names(df_to_plot)
names(df_to_plot)[names(df_to_plot)== "df_metric_target_vs_all.variable"] <- "variable"
names(df_to_plot)[2]
class(names(df_metric_target_vs_all)[2])
# df_to_plot$col <- df_metric_target_vs_all[,2]
head(df_to_plot,3)
for (col in 2:ncol(df_metric_target_vs_all))
{
df_to_plot$col <- df_metric_target_vs_all[,col]
df_to_plot$col <- df_to_plot$col/df_metric_target_vs_all[,ncol(df_metric_target_vs_all)]
names(df_to_plot)[names(df_to_plot)=="col"] <- paste(names(df_metric_target_vs_all)[col],target, sep = ".")
}
names(df_to_plot)[ncol(df_to_plot)] <- "overallholder" # to rename the last column to be devoid of target category notation
library(plotly)
library(ggplot2)
overallholder
xvar <- names(df_to_plot)[2]
overallholder
xvar
ncol(df_to_plot)
names(df_to_plot)[2]
names(df_to_plot)[3]
p <- plot_ly(df_to_plot
, x = df_to_plot[,2]
, y = variable
, name = names(df_to_plot)[2]
, mode = "markers"
, marker = list(color = 2,size = 8)
)
ncoltoplot <- ncol(df_to_plot) #-1
ncoltoplot # for some reason the above needs to be done before using the loop
# else there would be an extra run where the second to last column will be represented twice
q<-p
ncoltoplot
for (col in 3:ncoltoplot) # Note that ncoltoplot -1 will not work as expected
{
q<-add_trace(q
, x = df_to_plot[,col]
, y = variable
, name = names(df_to_plot)[col]
, marker = list(color = col, size = 8)
, evaluate = TRUE) #evaluate = TRUE allows the loop to function for add_trace
}
layout(q,
title = paste(target, " Metric Index Scale", sep = "."),
xaxis = list(title = ""),
margin = list(l=60, r=60),
yaxis = list(title = ""),
font = list(size = 8)
)
q
# End plotting
}
q
plot_diabetes_index_ni #not yet imputed
func_plot_comparison_nonimputed_vs_imputed<-function(a, b)
{
dev.off()
dev.off()
pdf("myplots.pdf", onefile = TRUE)
for (col in 1:ncol(a))
{
target <- a[,ncol(a)]
## col <-2
p <- subplot(
plot_ly(a, x= a[,col],color = target, type = "box")%>%layout(title = paste("Box Whisker Total ", colnames(a)[col], sep = ".")),
plot_ly(b, x= b[,col],color = target, type = "box")%>%layout(title = paste("Box Whisker Total ", colnames(b)[col], " Imputed", sep = ".")),
margin = 0.05
) %>% layout(showlegend = FALSE)
## q <- ggplot(a,aes(factor(target),a[,col]))
## print(q + geom_boxplot() + geom_jitter() + coord_flip())
## q <- ggplot(b,aes(factor(target),b[,col]))
## print(q + geom_boxplot() + geom_jitter() + coord_flip())
require(cowplot) #http://stackoverflow.com/questions/1249548/side-by-side-plots-with-ggplot2
plot1 <- qplot(factor(target), a[,col], data = a, geom = "boxplot")
plot2 <- qplot(factor(target), b[,col], data = b, geom = "boxplot")
print(plot_grid(plot1, plot2, align='h', labels=c(colnames(a)[col], paste(colnames(a)[col],"Imputed",sep="."))))
# http://stackoverflow.com/questions/16074985/r-not-able-to-save-the-plot
# https://plot.ly/ggplot2/
# http://docs.ggplot2.org/0.9.3.1/geom_boxplot.html
Sys.sleep(0)
}
dev.off()
file.show("myplots.pdf")
}
func_plot_comparison_nonimputed_vs_imputed(a,b)
dev.off()
b <- nhanes_numDF_numOnly_ni
b$custID <- NULL
head(b,2)
b$fraudRisk.1 <- NULL
b$state<-NULL
b$gender <-NULL
dfK <- data.frame(No_Cluster=numeric()
, TotWithinSS = numeric()
, BetweenSS = numeric()
, TotSS = numeric()
, stringsAsFactors = FALSE)
k_iterations = 60
t1 <- Sys.time()
for (i in 2:k_iterations){
kmeans_imp_hex <- h2o.kmeans(
training_frame = b
, k= i
, max_iterations = 1000
, standardize = T
)
dfK[i-1,1]<-i
dfK[i-1,2]<-getTotWithinSS(kmeans_imp_hex)
dfK[i-1,3]<-getBetweenSS(kmeans_imp_hex)
dfK[i-1,4]<-getTotSS(kmeans_imp_hex)
}
t2 <- Sys.time()
t2-t1
dfK
dfK_melt <- melt(dfK, id=c("No_Cluster"))
library(ggplot2)
library(plotly)
p <- ggplot(data = dfK_melt, aes(x = No_Cluster, y = value)) +
geom_point(aes(text = paste("SS:", variable)), size = 4) +
geom_smooth(aes(colour = variable, fill = variable)) + facet_wrap(~ variable)
(gg <- ggplotly(p))
gg
p
ggplotly(p)
dfK
p
ggplotly(p)
t1 <- Sys.time()
for (i in 2:k_iterations){
kmeans_imp_hex <- h2o.kmeans(
training_frame = b
, k= i
, max_iterations = 1000
, standardize = T
)
dfK[i-1,1]<-i
dfK[i-1,2]<-getTotWithinSS(kmeans_imp_hex)
dfK[i-1,3]<-getBetweenSS(kmeans_imp_hex)
dfK[i-1,4]<-getTotSS(kmeans_imp_hex)
}
t2 <- Sys.time()
t2-t1
dfK
head(b,2)
plot_diabetes_index_ni #not yet imputed
df$targetholder
df <- as.data.frame(df)
df$dummyholder <- "overalldummy"
names(df)[names(df)=="dummyholder"] <- "overallholder"
overallholder <- "overallholder"
head(df,5)
library(RevoScaleR)
install.packages("RevoScaleR", lib=grep("Program Files", .libPaths(), value=TRUE)[1])
library(RevoScaleR)
sqlConnString <- "Driver=SQL Server;Server=DESKTOP-AK3536K\\RSQLSERVER2; Database=SQLR;Trusted_Connection=TRUE"
install.packages("kernlab")
library(kernlab)
data(spam)
summary(spam)
str(spam)
colnames(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
str(trainIndicator)
str(trainIndicator) # a numeric vector
names(trainSpam)
trainSpam <-spam[trainIndicator == 1,]
testSpam <- spam[trainIndicator == 0, ]
names(trainSpam)
na_count<- as.data.frame(t(as.data.frame(lapply(lapply(trainSpam, is.na),sum))))
na_count
str(trainSpam)
plot(trainSpam$capitalLong ~trainSpam$type)
plot(trainSpam$capitalLong)
hist(trainSpam$capitalLong)
str(trainSpam)
plot(log10(trainSpam$capitalLong) ~trainSpam$type)
plot(trainSpam$capitalLong, trainSpam$type)
plot(c(trainSpam$capitalLong, trainSpam$type))
plot(log10(trainSpam[,1:4]+1))
plot(trainSpam[,1:4])
par = mfrow(c(2,1))
par(mfrow=c(2,1))
plot(log10(trainSpam[,1:4]+1))
plot(trainSpam[,1:4])
hCluster = hclust(dist(t(trainSpam[, 1:57])))
hCluster
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
par(mfrow=c(1,1))
plot(hClusterUpdated)
trainSpam
trainSpam$type
trainSpam$numType <- as.numeric(trainSpam$type)
table(trainSpam$numType, trainSpam$type)
as.list(table(trainSpam$numType, trainSpam$type))
as.matrix(table(trainSpam$numType, trainSpam$type))
table(trainSpam$numType, trainSpam$type) # to confirm that spam = 1 and nonspam = 0
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
lmFormula = reformulate(names(trainSpam)[1], response = "numType")
lmFormula
?cv.glm
costFunction = function(x, y) sum(x != (y > 0.5))*1.0/length(x) # percent of error? x is for the observed, y is for the predicted.
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
lmFormula = reformulate(names(trainSpam)[2], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
?glm
glm
eval
.Internal(eval(expr, envir, enclos))
names(trainSpam)[which.min(cvError)]
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
names(trainSpam)[which.min(cvError)]
.Internal(eval(expr, envir, enclos))
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
library(caret)
install.packages("caret")
data(spam)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y = spam$type
, p = .75
, list = FALSE)
training <- spam[inTrain,]
dim(training)
testing <- spam[-inTrain,]
dim(testing)
# Spam example: fit a model
set.seed(32343)
modelFit <- train(type~.
, data = inTraining
, method = 'glm')
# Spam example: fit a model
set.seed(32343)
modelFit <- train(type~.
, data = training
, method = 'glm')
library(e1071)
install.packages("e1071")
library(e1071)
set.seed(32343)
modelFit <- train(type~.
, data = training
, method = 'glm')
modelFit$finalModel
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, spam$type)
confusionMatrix(predictions, testing$type)
set.seed(32323)
set.seed(32323)
folds <- createFolds(y=spam$type, k = 10, list = TRUE, returnTrain = TRUE)
sapply(folds,length)
folds[[1]][1:10]
str(folds)
set.seed(32323)
folds <- createFolds(y=spam$type, k = 10, list = TRUE, returnTrain = FALSE) # returns the folds on test set
sapply(folds,length)
folds[[1]][1:10]
preObj<- preProcess(training[,-58], method = c("center","scale"))
trainS<- predict(preObj,training[,-58])
str(trainS)
trainAveS <- trainS$capitalAve
str(trainAveS)
mean(trainAveS)
mean(trainAveS)
sd(trainAveS)
trainCapAveS <- trainS$capitalAve # a capital Ave
str(trainCapAveS) # a data frame
mean(trainCapAveS)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAve <- testing$capitalAve
trainCapAve <- trainS$capitalAve # a capital Ave
mean(trainCapAve)
str(trainCapAve) # a data frame
mean(trainCapAve)
sd(trainCapAve)
testCapAveS <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
testCapAveS <- (testCapAve - mean(testCapAve))/sd(testCapAve)
mean(testCapAveS)
sd(testCapAveS)
testCapAveS <- predict(preObj,testing[,-58])$capitalAve
mean(testCapAves)
mean(testCapAveS)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
trainCapAve <- training$capitalAve
(trainCapAve - mean(trainCapAve))/sd(trainCapAve)
trainAveS<-(trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainAveS)
sd(trainAveS)
mean(testCapAve)
mean(trainCapAve)
sd(trainCapAve)
sd(testCapAve)
mean(testCapAve)
sd(testCapAve)
mean(trainCapAve)
sd(trainCapAve)
testCapAveS <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAve)
mean(testCapAveS)
sd(testCapAveS)
testCapAveS <- predict(preObj,testing[,-58])$capitalAve
mean(testCapAveS)
set.seed(32343)
modelFit <- train(type~., data = training, method = "glm", preProcess = c("center", "scale"))
preObj <- preProcess(training[,-58],method= c("BoxCox"))
preObj <- preProcess(training[,-58],method= "BoxCox")
preObj <- preProcess(training[,-58],method= c("BoxCox"))
preObj
preObj <- preProcess(training[,-58],method= "BoxCox")
preObj
trainCapAveS <- predict(preObj, training[,-58])$capitalAve
trainCapAveS <- predict(preObj, training[,-58])$capitalAve
par(mfrow =c(1,2)); hist(trainCapAveS); qqnorm(trainCapAveS)
set.seed(13343)
dim(training)
colnames(training)
colnames(training)[order(colnames(training)),]
colnames(training)[order(colnames(training))]
training$capitalAve[selectNA] <- NA
selectNA <- rbinom(dim(training)[1],size =1, prob= 0.05) ==1 # a vector of length dim(training)[1], with a .05 prob of == 1
training$capitalAve[selectNA] <- NA
capAve <- predict(preObj, training[,-58])$capitalAve
preObj <- preProcess(training[,-58], method = "knnImpute") # impute using knn impute method
capAve <- predict(preObj, training[,-58])$capitalAve
install.packages("RANN")
modelFit <- train(type~.,data = training, method = "glm", preProcess = c("BoxCox"))
str(modelFit)
modelFit$finalModel
modelFit$fitted
str(modelFit)
modelFit$model
modelFit$trainingData
training
head(modelFit$trainingData)
head(training)[,52:58]
head(modelFit$trainingData[,52:58]
)
head(modelFit$trainingData)[,52:58]
predict(modelFit, newdata = testing, type = "prob")
head(predict(modelFit, newdata = testing, type = "prob"))
a<-predict(modelFit, newdata = testing, type = "prob")
khead(a)
head(a)
plot(a)
library(h2o)
h2o.init()
conn <- h2o.init(ip = "localhost", port = 54321)
install.packages("manipulate")
myplot <-function(s){}
myplot <-function(s){ plot(cars$dist - mean(car$dist), cars$speed - mean(cars$speed)) abline(0,s)}
myplot <-function(s){ plot(cars$dist - mean(car$dist), cars$speed - mean(cars$speed)) abline(0,s)
myplot <-function(s){ plot(cars$dist - mean(car$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myPlot(s), s = slider(0,2,step = 0.1))
library(manipulate)
manipulate(myPlot(s), s = slider(0,2,step = 0.1))
manipulate(myplot(s), s = slider(0,2,step = 0.1))
library(cars)
attach(cars)
manipulate(myplot(s), s = slider(0,2,step = 0.1))
myplot <-function(s){ plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myplot(s), s = slider(0,2,step = 0.1))
install.packages("rCharts")
install.packages("base64enc")
install.packages("rCharts")
library(devtools)
install_github("ramnathv/rCharts@dev")
library(rCharts)
attach(airquality)
dTable(airquality, sPaginationType = "full_numbers")
install_github('slidify', 'ramnath')
install_github('slidifyLibraries', 'ramnath')
install_github('ramnathv/slidify@dev')
install_github('ramnathv/slidifyLibraries@dev')
library(slidify)
setwd("~/sample/project")
setwd("~/")
getwd()
setwd("../")
getwd()
setwd("~/Desktop/DS/")
setwd("/Desktop/DS/")
setwd"../Desktop/DS/"
setwd("../Desktop/DS/")
getwd()
mkdir("hi")
setwd("~/Desktop/DS/coursera")
setwd("../Desktop/DS/coursera")
setwd("C:/Users/Yu/Desktop/DS/coursera")
author("Yu")
author("first_deck")
library(slidify)
slidify("index.Rmd")
slidify('index.Rmd')
getwd()
slidify('index.Rmd')
slidify('index.Rmd')
